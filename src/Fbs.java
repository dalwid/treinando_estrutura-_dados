import java.util.*;

public class Fbs {

/*
                           O que √© Busca em Largura (BFS)?

√â uma forma de explorar um grafo em camadas: primeiro os vizinhos diretos (dist√¢ncia 1),
depois os vizinhos dos vizinhos (dist√¢ncia 2), e assim por diante.


            Exerc√≠cio 1: "Ache o menor caminho em uma grade simples"

Descri√ß√£o: Dado um mapa 2D (uma grade) com c√©lulas livres . e paredes #,
encontre o menor n√∫mero de passos do canto superior esquerdo at√© o canto inferior direito.
S√≥ pode andar pra cima, baixo, esquerda ou direita.

Exemplo:

Entrada:
. . #
. # .
. . .

Sa√≠da: 4
Caminho: (0,0) ‚Üí (1,0) ‚Üí (2,0) ‚Üí (2,1) ‚Üí (2,2)

-----------------------------------------------------
                    EXPLICA√á√ÉO
-----------------------------------------------------

üåü Exerc√≠cio 1: Menor Caminho em uma Grade
üìú Enunciado:
Voc√™ tem uma grade 2D onde:

. representa um espa√ßo livre

# representa uma parede (bloqueado)

Voc√™ come√ßa no canto superior esquerdo (0, 0) e quer chegar ao canto inferior direito (n-1, m-1)

S√≥ pode andar para cima, baixo, esquerda ou direita

‚úÖ Objetivo:
Retornar o menor n√∫mero de passos para chegar ao destino. Se n√£o for poss√≠vel, retornar -1.


Estrat√©gia (BFS):

1. Coloca o ponto de partida na fila

2. Explora todos os vizinhos poss√≠veis

3. Marca como visitado

4. Quando chega ao destino, retorna a dist√¢ncia

*/
public int menorCaminho(char[][] grade){
    int n = grade.length;
    int m = grade[0].length;

    boolean[][] visitado = new boolean[n][m];
    Queue<int[]> fila = new LinkedList<>();
    fila.add(new int[]{0, 0, 0}); // x, y, passos
    visitado[0][0] = true;

    int[][] movimentos = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

    while (!fila.isEmpty()){
        int[] atual = fila.poll();
        int x = atual[0], y = atual[1], passos = atual[2];

        if(x == n - 1 && y == m - 1){
            return passos;
        }

        for (int[] mov : movimentos){
            int nx = x + mov[0];
            int ny = y + mov[1];

            if(nx >= 0 && ny >= 0 && nx < n && ny < m && !visitado[nx][ny] && grade[nx][ny] == '.'){
                visitado[nx][ny] = true;
                fila.add(new int[]{nx, ny, passos + 1});
            }
        }
    }

    return - 1;
}



//    $grade = [
//            ['.', '.', '.', '#'],
//            ['#', '#', '.', '#'],
//            ['.', '.', '.', '.'],
//            ['.', '#', '#', '.']
//            ];
//
//
//#print(menor_caminho(grade))  # Sa√≠da esperada: 4



/*
                    Exerc√≠cio 2: "Contando ilhas"

Descri√ß√£o: Dada uma matriz de 0 (√°gua) e 1 (terra), conte quantas ilhas separadas existem.
Uma ilha √© um grupo de 1s conectados vertical ou horizontalmente.

Exemplo:

Entrada:
1 1 0 0
0 1 0 1
0 0 1 1
Sa√≠da: 2

-----------------------------------------------------
                    EXPLICA√á√ÉO
-----------------------------------------------------

üåä Exerc√≠cio 2: Contando Ilhas
üìú Enunciado:
Dada uma matriz com:

1 = terra

0 = √°gua

Conte quantas ilhas separadas existem.
Uma ilha √© um grupo de 1s conectados vertical ou horizontalmente.

üß† Estrat√©gia (BFS):
Vamos percorrer toda a matriz.

Sempre que encontrarmos um 1 n√£o visitado, iniciamos uma busca em largura (BFS) a partir dele.

Durante a BFS, vamos marcar todos os 1s conectados (a mesma ilha).

Repetimos at√© visitar tudo.
*/
public int contarIlhas(int[][] matriz){
    int n = matriz.length;
    int m = matriz[0].length;

    boolean[][] visitado = new boolean[n][m];
    int[][] direcoes = {{-1,0}, {1,0}, {0,-1}, {0,1}};
    int totalIlhas = 0;

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if(matriz[i][j] == 1 && !visitado[i][j]){
                bfs(i, j, matriz, visitado, direcoes);
                totalIlhas++;
            }
        }

    }

    return totalIlhas;
}
private void bfs(int x, int y, int[][] matriz, boolean[][] visitado, int[][] direcoes){
    int n = matriz.length, m = matriz[0].length;
    Queue<int[]> fila = new LinkedList<>();
    fila.add(new int[]{x, y});
    visitado[x][y] = true;

    while (!fila.isEmpty()){
        int[] atual = fila.poll();
        int cx = atual[0], cy = atual[1];

        for (int[] dir : direcoes){
            int nx = cx + dir[0];
            int ny = cy + dir[1];

            if(nx >= 0 && ny >= 0 && nx < n && ny < m &&
                    !visitado[nx][ny] && matriz[nx][ny] == 1){
                visitado[nx][ny] = true;
                fila.add(new int[]{nx, ny});
            }
        }
    }
}


//    $entrada = [
//            [1, 1, 0, 0],
//            [0, 1, 0, 1],
//            [0, 0, 1, 1]
//            ];
//
//# print(contar_ilhas(entrada))  # Sa√≠da esperada: 2




/*
                        Exerc√≠cio 3: "Rede de amigos"

Descri√ß√£o: Voc√™ tem um grafo onde cada n√≥ √© uma pessoa e uma aresta indica amizade.
Dado um ID de uma pessoa, liste todos os amigos em n√≠vel 2 (amigos dos amigos), sem repetir ningu√©m.


-----------------------------------------------------
                    EXPLICA√á√ÉO
-----------------------------------------------------

Imagine assim, Pato:

Cada pessoa √© uma bolinha (um n√≥).

Cada amizade √© uma linha ligando duas bolinhas (uma aresta).

Agora, o problema √©:

Dado um pato, quem s√£o os amigos dos amigos dele?

Passos bem de pato:

Primeiro, olhamos para quem s√£o os amigos diretos (linha ligada direto no pato).

Depois, para cada amigo, olhamos quem s√£o os amigos deles (amigos dos amigos).

Cuidado! Um amigo de amigo pode ser:

Algu√©m que j√° era amigo direto (n√£o queremos contar de novo),

O pr√≥prio pato (n√£o queremos nos contar tamb√©m!).

Ent√£o, coletamos s√≥ os amigos de segundo n√≠vel, sem repetir.
*/
public List<String> amigosnivel2(Map<String, List<String>> grafo, String pessoaInicial){
    Map<String, Integer> visitado = new HashMap<>();
    Queue<Pair> fila = new LinkedList<>();
    Set<String> resultado = new HashSet<>();

    fila.add(new Pair(pessoaInicial, 0));
    visitado.put(pessoaInicial, 0);

    while(!fila.isEmpty()){
        Pair atual = fila.poll();
        String pessoa = atual.nome;
        int nivel = atual.nivel;

        if (nivel >= 2){
            continue;
        }

        for (String amigo : grafo.getOrDefault(pessoa, new ArrayList<>())){
            if(!visitado.containsKey(amigo)){
                visitado.put(amigo, nivel + 1);
                fila.add(new Pair(amigo, nivel + 1));

                if (nivel + 1 == 2){
                    resultado.add(amigo);
                }
            }
        }
    }

    return new ArrayList<>(resultado);
}

/*
1 -> 2, 3
2 -> 1, 4
3 -> 1, 5
4 -> 2
5 -> 3, 6
6 -> 5


Se come√ßarmos do 1:

Amigos diretos: 2 e 3

Amigos dos amigos: (4 a partir do 2) e (5 a partir do 3)

Logo, amigos de n√≠vel 2 s√£o 4 e 5.

üõë N√£o inclui o 1 nem repete 2 ou 3.
*/


/*
        Exerc√≠cio 4: "Dist√¢ncia mais curta entre dois pontos em um labirinto"

Descri√ß√£o: Parecido com o Exerc√≠cio 1, mas agora voc√™ pode escolher
qualquer ponto inicial e final na grade, e precisa encontrar o caminho mais curto.



                Imagine, Pato:

O labirinto √© uma tabela quadrada (tipo um tabuleiro).

Cada quadradinho pode ser:

Livre (voc√™ pode andar nele) ‚Üí vamos representar como 0

Parede (voc√™ n√£o pode passar) ‚Üí vamos representar como 1

Voc√™ pode andar:

Para cima, para baixo, para a esquerda ou para a direita (n√£o pode andar na diagonal).

Agora o desafio √©:

Dado um quadradinho de partida e um de chegada, achar o menor n√∫mero de passos para ir de um at√© o outro.

Se n√£o der para chegar, falamos: "n√£o tem caminho".

Passos de pato:

Comece do ponto inicial.

Tente ir para todos os lados (mas s√≥ onde for livre, sem bater na parede e sem sair do tabuleiro).

Conte quantos passos voc√™ andou.

Continue andando at√© achar o destino.

Assim que achar, o n√∫mero de passos que gastamos √© o menor caminho (porque usamos BFS ‚Äî que anda n√≠vel por n√≠vel).

*/
public int menorDistancia(int[][] labirinto, int inicioLinha, int inicioColuna, int fimColuna, int fimLinha){
    int n = labirinto.length;
    int m = labirinto[0].length;

    boolean[][] visitado = new boolean[n][m];
    Queue<Ponto> fila = new LinkedList<>();
    fila.add(new Ponto(inicioLinha, inicioColuna, 0));
    visitado[inicioLinha][inicioColuna] = true;

    int[] dLinha  = {-1, 1, 0, 0}; // cima, baixo
    int[] dColuna = {0, 0, -1, 1}; // esquerda, direita

    while (!fila.isEmpty()){
        Ponto atual = fila.poll();

        if(atual.linha == fimLinha && atual.coluna == fimColuna){
            return atual.passos;
        }

        for (int i = 0; i < 4; i++){
            int novaLinha  = atual.linha + dLinha[i];
            int novaColuna = atual.coluna + dColuna[i];

            if (novaLinha >= 0 && novaLinha < n && novaColuna >= 0 && novaColuna < m){
                if (!visitado[novaLinha][novaColuna] && labirinto[novaLinha][novaColuna] == 0){
                    visitado[novaLinha][novaColuna] = true;
                    fila.add(new Ponto(novaLinha, novaColuna, atual.passos + 1));
                }
            }
        }
    }

    return - 1; // n√£o tem caminho
}

/*
0 1 0 0 0
0 1 0 1 0
0 0 0 1 0
0 1 1 1 0
0 0 0 0 0


Queremos sair do canto superior esquerdo (0,0) at√© o canto inferior direito (4,4).

Resposta: 12 passos.
*/

/*

            Exerc√≠cio 5: "Espalhamento de informa√ß√£o"

Descri√ß√£o: Dado um grafo e um n√≥ inicial, cada pessoa avisa os seus amigos em 1 minuto.
Quanto tempo leva para todo mundo saber da not√≠cia?



                Imagine, Pato:

Temos um grupo de patos (pessoas), cada um √© uma bolinha.

Cada linha entre eles indica que um pode falar com outro (amizade).

Quando um pato descobre uma not√≠cia, ele avisa seus amigos.

Cada 1 minuto, um pato consegue avisar todos os seus amigos.

Cada amigo, no minuto seguinte, avisa os amigos dele, e assim por diante.

O objetivo √©:

Quanto tempo leva para todo mundo saber da not√≠cia?

Passos de pato:

Come√ßamos pelo pato que sabe da not√≠cia (n√≥ inicial).

No primeiro minuto, avisamos todos os amigos diretos.

No segundo minuto, esses amigos avisam os amigos deles que ainda n√£o sabem.

E assim vai.

Quando todo mundo estiver avisado, paramos e contamos quantos minutos passaram.

Se ficar algum pato que n√£o consegue ser avisado (porque ele est√° isolado), dizemos que n√£o d√°.

*/
public int tempoParaEspalhar(Map<Integer,List<Integer>> grafo, int idInicial){
    Set<Integer> avisados = new HashSet<>();
    Queue<Integer> fila = new LinkedList<>();

    fila.add(idInicial);
    avisados.add(idInicial);

    int minutos = 0;

    while (!fila.isEmpty()) {
        int tamanhoNivel = fila.size();
        boolean espalhouNesteMinuto = false;

        for (int i = 0; i < tamanhoNivel; i++) {
            int atual = fila.poll();
            for (Integer amigo : grafo.getOrDefault(atual, new ArrayList<>())) {
                if (!avisados.contains(amigo)) {
                    fila.add(amigo);
                    avisados.add(amigo);
                    espalhouNesteMinuto = true;
                }
            }
        }

        if (espalhouNesteMinuto) {
            minutos++;
        }
    }

    // Verifica se algu√©m ficou de fora
    if (avisados.size() < grafo.size()) {
        return -1; // Nem todo mundo recebeu a not√≠cia
    }

    return minutos;
}

/*
1 -> 2, 3
2 -> 1, 4
3 -> 1
4 -> 2, 5
5 -> 4

No minuto 0: S√≥ o 1 sabe.

No minuto 1: 2 e 3 ficam sabendo.

No minuto 2: 4 fica sabendo.

No minuto 3: 5 fica sabendo.

Resposta final: 3 minutos.
 */



/*
            Exerc√≠cio 6: "Convers√£o de palavras (Word Ladder)"

Descri√ß√£o: Transforme uma palavra em outra, trocando uma letra por vez, mas cada
nova palavra precisa existir num dicion√°rio. Use BFS para encontrar o menor n√∫mero de passos.

Exemplo: hit ‚Üí hot ‚Üí dot ‚Üí dog ‚Üí cog


        Imagine assim, Pato:

Voc√™ tem uma palavra inicial (tipo "hit")

Quer chegar numa palavra final (tipo "cog")

Pode mudar uma letra por vez (ex: "hit" ‚Üí "hot" √© v√°lido)

Mas: s√≥ pode usar palavras reais, que estejam num dicion√°rio (uma lista).

O objetivo √©:
    Descobrir qual √© o menor n√∫mero de passos para transformar a palavra inicial na final,
    trocando uma letra por vez e s√≥ usando palavras do dicion√°rio.


                üß† Como funciona (passos de pato):
Cada palavra √© como um n√≥ num grafo.

Se voc√™ pode transformar uma palavra em outra (trocando s√≥ uma letra), ent√£o elas est√£o conectadas.
Come√ßamos da palavra inicial.

A cada passo, tentamos mudar uma letra de cada posi√ß√£o da palavra, e vemos se a nova palavra est√° no dicion√°rio.
Usamos BFS (busca em largura) para explorar todas as possibilidades e achar o caminho mais curto at√© chegar na palavra final.
*/
public int ladderLength(String inicio, String fim, List<String> dicionario){
    Set<String> wordSet = new HashSet<>(dicionario);

    if(!wordSet.contains(fim)){
        return 0;
    }

    Queue<String> fila = new LinkedList<>();
    fila.add(inicio);

    Set<String> visitado = new HashSet<>();
    visitado.add(inicio);

    int passos = 1;

    while(!fila.isEmpty()){
        int tamanhoNivel = fila.size();

        for (int i = 0; i < tamanhoNivel; i++) {
            String palavraAtual = fila.poll();
            if(palavraAtual.equals(fim)){
                return passos;
            }

            for (String vizinha : gerarVizinhancas(palavraAtual)){
                if (wordSet.contains(vizinha) && !visitado.contains(vizinha)){
                    fila.add(vizinha);
                    visitado.add(vizinha);
                }
            }
        }
        passos++;
    }

    return 0; // N√£o h√° caminho
}
private List<String> gerarVizinhancas(String palavra){
    List<String> vizinhas = new ArrayList<>();
    char[] letras = palavra.toCharArray();

    for (int i = 0; i < letras.length; i++) {
        char original = letras[i];
        for (char c = 'a'; c <= 'z'; c++){
            if (c == original){
                continue;
            }
            letras[i] = c;
            vizinhas.add(new String(letras));
        }
        letras[i] = original;
    }

    return vizinhas;
}

/*
            üìã Resultado:
Transformar "hit" em "cog" com o dicion√°rio:
"hot", "dot", "dog", "lot", "log", "cog"

Caminho mais curto:

hit ‚Üí hot ‚Üí dot ‚Üí dog ‚Üí cog

üßÆ 4 passos entre palavras, mas como contamos o hit tamb√©m:
Resposta: 5 passos (incluindo o in√≠cio e o fim)
 */



/*
            Exerc√≠cio 7: "Transforma√ß√£o de n√∫mero"

Descri√ß√£o: Voc√™ pode transformar um n√∫mero x em y com as opera√ß√µes: x*2, x+1.
Encontre o n√∫mero m√≠nimo de opera√ß√µes para chegar em y a partir de x.


Imagine, Pato:

Voc√™ tem um n√∫mero x.

Quer transformar ele em um n√∫mero y.

Pode fazer duas coisas:

Multiplicar por 2 ‚Üí x * 2

Somar 1 ‚Üí x + 1

O objetivo √©:

Descobrir qual √© o menor n√∫mero de opera√ß√µes para transformar x em y.

üß† Como funciona (passos de pato):
Cada n√∫mero √© como um n√≥.

De cada n√∫mero, voc√™ pode ir para:

Ele * 2

Ele + 1

Fazemos uma busca em largura (BFS) a partir de x.

A cada passo, testamos as duas opera√ß√µes e vemos se chegamos em y.

Assim que alcan√ßarmos y, retornamos o n√∫mero de passos feitos.
*/
public int transformarNumero(int x, int y){
    Queue<int[]> fila = new LinkedList<>();
    Set<Integer> visitado = new HashSet<>();

    fila.add(new int[]{x, 0});
    visitado.add(x);

    while(!fila.isEmpty()){
        int[] atual = fila.poll();
        int numero = atual[0];
        int passos = atual[1];

        if(numero == y){
            return passos;
        }

        // Opera√ß√µes poss√≠veis
        int[] proximos = {numero * 2, numero + 1};

        for (int prox : proximos){
            if(!visitado.contains(prox) && prox <= y * 2){
                fila.add(new int[]{prox, passos + 1});
                visitado.add(prox);
            }
        }
    }

    return - 1; // N√£o deve acontecer
}

/*
            üìã Exemplo: x = 3, y = 11
Caminho poss√≠vel:

3 ‚Üí 6 ‚Üí 7 ‚Üí 8 ‚Üí 9 ‚Üí 10 ‚Üí 11 (6 passos)

Melhor caminho: 3 ‚Üí 4 ‚Üí 5 ‚Üí 10 ‚Üí 11 (4 passos)

O algoritmo encontra o caminho mais curto automaticamente com BFS.
 */



/*
            Exerc√≠cio 8: "Zumbis invadindo a cidade"

Descri√ß√£o: Matriz com 1 para zumbis e 0 para humanos. A cada minuto,
zumbis infectam humanos ao lado (vertical e horizontal).
Descubra quantos minutos at√© todos virarem zumbis (ou retorne -1 se algu√©m nunca for infectado).


            Imagine, Pato:

Voc√™ tem uma matriz (como um tabuleiro) cheia de:

1 = zumbis üßü

0 = humanos üò®

A cada minuto, qualquer zumbi consegue transformar os humanos ao lado dele (cima, baixo, esquerda, direita) em zumbis.

Zumbis n√£o andam na diagonal!

O objetivo √©:

Descobrir quantos minutos vai levar para todos os humanos virarem zumbis.
Se sobrar algum humano que nunca pode ser infectado, retornamos -1.


            üß† Como funciona (passos de pato):
Come√ßamos com todos os zumbis na fila (como fontes de infec√ß√£o).

A cada minuto:

Cada zumbi infecta os humanos vizinhos.

Esses novos zumbis entram na fila para infectar no pr√≥ximo minuto.

Contamos quantos minutos se passaram.

No final, verificamos se ainda sobrou algum 0 na matriz.

*/
public int minutosParaInfeccaoTotal(int[][] cidade){
    int linhas = cidade.length;
    int colunas = cidade[0].length;

    Queue<int[]> fila = new LinkedList<>();
    int humanos = 0;

    // Passo 1: localizar zumbis e contar humanos
    for (int i = 0; i < linhas; i++) {
        for (int j = 0; j < colunas; j++) {
            if (cidade[i][j] == 1){
                fila.add(new int[]{i, j});
            }
            else if(cidade[i][j] == 0){
                humanos++;
            }
        }
    }

    if (humanos == 0){
        return 0;
    }

    int minutos = 0;
    int[][] direcoes = {{0,1}, {1, 0}, {0,-1}, {-1, 0}}; // direita, baixo, esquerda, cima

    while (!fila.isEmpty()){
        int tamanho = fila.size();
        boolean infectou = false;

        for (int i = 0; i < tamanho; i++) {
            int[] atual = fila.poll();
            int x = atual[0], y = atual[1];

            for (int[] d : direcoes){
                int nx = x + d[0], ny = y + d[1];
                if(nx >= 0 && ny >= 0 && nx < linhas && ny < colunas && cidade[nx][ny] == 0){
                    cidade[nx][ny] = 1;
                    fila.add(new int[]{nx, ny});
                    humanos--;
                    infectou = true;
                }
            }
        }

        if (infectou)
            minutos++;
    }

    return humanos == 0 ? minutos : - 1;
}
/*
üìã Resultado para o exemplo:
Entrada:
0 1 0
0 0 0
1 0 0

Minuto 0: zumbis em (0,1) e (2,0)

Minuto 1: infecta (0,0), (1,1), (2,1)

Minuto 2: infecta (1,0), (1,2), (2,2)

Resposta: 2 minutos
 */

/*
                             Exerc√≠cio 9: "Cavalo no tabuleiro de xadrez"

Descri√ß√£o: Dado um tabuleiro n x n e a posi√ß√£o de um cavalo, ache o n√∫mero m√≠nimo de movimentos para chegar at√© outra posi√ß√£o.



        Imagine, Pato:

Voc√™ tem um tabuleiro n x n.

Um cavalo come√ßa em uma certa posi√ß√£o.

Ele se move em "L": 2 casas numa dire√ß√£o + 1 na perpendicular (como no xadrez!).

Seu objetivo √©:

Descobrir o n√∫mero m√≠nimo de movimentos que o cavalo precisa fazer para chegar at√© outra posi√ß√£o no tabuleiro.


                    üß† Como funciona (passos de pato):
Cada casa do tabuleiro √© um n√≥.

O cavalo pode ir para no m√°ximo 8 posi√ß√µes diferentes a partir de qualquer ponto.

A cada movimento, voc√™ tenta todos os pulos poss√≠veis.

Usamos BFS (busca em largura) para garantir que achamos o caminho mais curto.

*/
int[][] movimentos = {
        {2, 1}, {1, 2}, {-1, 2}, {-2, 1},
        {-2, -1}, {-1, -2}, {1, -2}, {2, -1}
};
public int minMovimentos(int n, int[] inicio, int[] fim){
    boolean[][] visitado = new boolean[n][n];
    Queue<int[]> fila = new LinkedList<>();
    fila.add(new int[]{inicio[0], inicio[1], 0});
    visitado[inicio[0]][inicio[1]] = true;

    while (!fila.isEmpty()) {
        int[] atual = fila.poll();
        int x = atual[0], y = atual[1], passos = atual[2];

        if (x == fim[0] && y == fim[1]) {
            return passos;
        }

        for (int[] mov : movimentos) {
            int nx = x + mov[0];
            int ny = y + mov[1];

            if (nx >= 0 && ny >= 0 && nx < n && ny < n && !visitado[nx][ny]) {
                fila.add(new int[]{nx, ny, passos + 1});
                visitado[nx][ny] = true;
            }
        }
    }

    return -1; // Se for imposs√≠vel (mas n√£o deveria num tabuleiro padr√£o)
}
/*
üìã Exemplo:
Tabuleiro 8x8
De (0, 0) at√© (7, 7)

‚û°Ô∏è A resposta √©: 6 movimentos
 */


/*
                             Exerc√≠cio 10: "Verificando se o grafo √© bipartido"

Descri√ß√£o: Use BFS para tentar colorir os v√©rtices com 2 cores. Se conseguir sem dois vizinhos com a mesma cor, ent√£o o grafo √© bipartido.


                Pensa comigo, Pato:

Voc√™ tem um grafo com v√©rtices conectados por arestas.

Voc√™ quer saber se √© poss√≠vel pintar os v√©rtices com duas cores apenas (por exemplo, vermelho e azul).

Mas tem uma regrinha:

Nenhum vizinho pode ter a mesma cor!

Se der pra fazer isso com todo o grafo, ele √© bipartido. Caso contr√°rio, n√£o √©.


            üß† Como funciona (passos de pato):
Pegamos qualquer v√©rtice e pintamos com a cor 0.

Usamos BFS:

Cada vez que visitamos um vizinho, pintamos ele com a cor oposta.

Se encontramos algu√©m j√° pintado com a mesma cor que o atual, ent√£o o grafo n√£o √© bipartido.

Precisamos repetir isso para todos os componentes do grafo (em caso de grafos desconexos).


*/
public boolean ehBipartido(List<List<Integer>> grafo){
    int n = grafo.size();
    int[] cor = new int[n];
    Arrays.fill(cor, -1); // -1 = sem cor

    for (int i = 0; i < n; i++) {
        if (cor[i] == -1) {
            if (!bfs(grafo, i, cor)) {
                return false;
            }
        }
    }

    return true;
}
private boolean bfs(List<List<Integer>> grafo, int inicio, int[] cor){
    Queue<Integer> fila = new LinkedList<>();
    fila.add(inicio);
    cor[inicio] = 0;

    while (!fila.isEmpty()) {
        int atual = fila.poll();

        for (int vizinho : grafo.get(atual)) {
            if (cor[vizinho] == -1) {
                cor[vizinho] = 1 - cor[atual]; // Pinta com a cor oposta
                fila.add(vizinho);
            } else if (cor[vizinho] == cor[atual]) {
                return false; // Vizinho tem a mesma cor? Falhou!
            }
        }
    }

    return true;
}
/*
üìã Exemplo:
Grafo:
0 -- 1
|    |
3 -- 2


Pode pintar:
0 e 2 com vermelho
1 e 3 com azul ‚úÖ
Resposta: bipartido
 */

}
